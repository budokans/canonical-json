import { encode } from '../src/encode';

describe('handleNumber', () => {
  it('returns 0 for all non-negative zero representations', () => {
    const input = [
      "for sig in 0 0.0 0.00; do for e in '' e E; do [ x$e = x ] && echo $sig, && continue; for e_sign in '' '-' ''; do for exp in 0 00 1 01; do echo $sig$e$e_sign$exp,; done; done; done; done",
      0,
      0,
      0,
      0e1,
      0e1,
      0,
      0,
      0e-1,
      0e-1,
      0,
      0,
      0e1,
      0e1,
      0,
      0,
      0e1,
      0e1,
      0,
      0,
      0e-1,
      0e-1,
      0,
      0,
      0e1,
      0e1,
      0.0,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e-1,
      0.0e-1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e-1,
      0.0e-1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e-1,
      0.0e-1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
      0.0,
      0.0,
      0.0e-1,
      0.0e-1,
      0.0,
      0.0,
      0.0e1,
      0.0e1,
    ];

    const expected = [
      "\"for sig in 0 0.0 0.00; do for e in '' e E; do [ x$e = x ] && echo $sig, && continue; for e_sign in '' '-' ''; do for exp in 0 00 1 01; do echo $sig$e$e_sign$exp,; done; done; done; done\"",
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
      '0',
    ];

    const result = input.map(encode);
    expect(result).toStrictEqual(expected);
  });

  /* eslint-disable */

  it('removes decimal points from integers', () => {
    const input = [
      0.0, 0.0, 4.0, 4.0, 4.2e1, 4.2e1, 0.42e2, 0.42e2, 80e-1, 80.0e-1,
      179.769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217e306,
      -0.0, -0.0, -4.0, -4.0, -4.2e1, -4.2e1, -0.42e2, -0.42e2, -80e-1,
      -80.0e-1,
      -179.769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217e306,
    ];

    const expected =
      '[0,0,4,4,42,42,42,42,8,8,null,0,0,-4,-4,-42,-42,-42,-42,-8,-8,null]';

    const result = encode(input);
    expect(result).toStrictEqual(expected);
  });

  it('removes exponents', () => {
    const input = [
      '2^8 +/- 1',
      2550e-1,
      2560e-1,
      2570e-1,
      '2^16 +/- 1',
      65.535e3,
      65.536e3,
      65.537e3,
      '2^32 +/- 1',
      4.294967295e9,
      4.294967296e9,
      4.294967297e9,
      '2^53 +/- 1',
      9007199254740991,
      9007199254740992,
      9007199254740993,
      '2^64 +/- 1',
      184467440737095516150e-1,
      184467440737095516160e-1,
      184467440737095516170e-1,
      '2^128 +/- 1',
      0.340282366920938463463374607431768211455e39,
      0.340282366920938463463374607431768211456e39,
      0.340282366920938463463374607431768211457e39,
      '2^256 +/- 1',
      115792089237316195423570985008687907853269984665640564039457584007913129639935,
      115792089237316195423570985008687907853269984665640564039457584007913129639936,
      115792089237316195423570985008687907853269984665640564039457584007913129639937,
      '10^100 +/- 1',
      9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
      1e100,
      10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
      '2^1024 +/- 1',
      179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215,
      179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216,
      179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217,
      '-2^8 +/- 1',
      -255,
      -256,
      -257,
      '-2^16 +/- 1',
      -65535,
      -65536,
      -65537,
      '-2^32 +/- 1',
      -4294967295,
      -4294967296,
      -4294967297,
      '-2^53 +/- 1',
      -9007199254740991,
      -9007199254740992,
      -9007199254740993,
      '-2^64 +/- 1',
      -18446744073709551615,
      -18446744073709551616,
      -18446744073709551617,
      '-2^128 +/- 1',
      -340282366920938463463374607431768211455,
      -340282366920938463463374607431768211456,
      -340282366920938463463374607431768211457,
      '-2^256 +/- 1',
      -115792089237316195423570985008687907853269984665640564039457584007913129639935,
      -115792089237316195423570985008687907853269984665640564039457584007913129639936,
      -115792089237316195423570985008687907853269984665640564039457584007913129639937,
      '-10^100 +/- 1',
      -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,
      -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
      -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,
      '-2^1024 +/- 1',
      -179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215,
      -179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216,
      -179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217,
    ];
    const expected =
      '["2^8 +/- 1",255,256,257,"2^16 +/- 1",65535,65536,65537,"2^32 +/- 1",4294967295,4294967296,4294967297,"2^53 +/- 1",9007199254740991,null,null,"2^64 +/- 1",null,null,null,"2^128 +/- 1",null,null,null,"2^256 +/- 1",null,null,null,"10^100 +/- 1",null,null,null,"2^1024 +/- 1",null,null,null,"-2^8 +/- 1",-255,-256,-257,"-2^16 +/- 1",-65535,-65536,-65537,"-2^32 +/- 1",-4294967295,-4294967296,-4294967297,"-2^53 +/- 1",-9007199254740991,null,null,"-2^64 +/- 1",null,null,null,"-2^128 +/- 1",null,null,null,"-2^256 +/- 1",null,null,null,"-10^100 +/- 1",null,null,null,"-2^1024 +/- 1",null,null,null]';

    const result = encode(input);
    expect(result).toStrictEqual(expected);
  });
});
