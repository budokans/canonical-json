import { encode } from '../src/encode';

/* eslint-disable */

describe('handleNumber', () => {
  it('single-digit nonzero significand part', () => {
    const input = [
      3.14, 3.14, 0.314e1, 31.4e-1, 11e-3,
      179.769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217e305,
      17976931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249284743063947412437776789342486548527630221960124609411945308295208500576883815068234246288147391311054082723716335051068458629823994724593847971630483535632962422413721.7,

      -3.14, -3.14, -0.314e1, -31.4e-1, -11e-3,
      -179.769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217e305,
      -17976931348623159077293051907890247336179769789423065727343008115773267580550096313270847732240753602112011387987139335765878976881441662249284743063947412437776789342486548527630221960124609411945308295208500576883815068234246288147391311054082723716335051068458629823994724593847971630483535632962422413721.7,
    ];

    const expected =
      '[3.14E0,3.14E0,3.14E0,3.14E0,1.1E-2,null,null,-3.14E0,-3.14E0,-3.14E0,-3.14E0,-1.1E-2,null,null]';

    const result = encode(input);
    expect(result).toStrictEqual(expected);
  });
});

describe('handleNumber', () => {
  it('single-digit nonzero significand part', () => {
    const input = [
      1e-1000,
      0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099,

      -1e-1000,
      -0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099,
    ];

    const expected = '[1.0E-1000,null,-1.0E-1000,null]';

    const result = encode(input);
    expect(result).toStrictEqual(expected);
  });
});
